using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.TaskGenerator.Models;
using FlubuCore.TaskGenerator.Models.Extensions;
using Microsoft.CodeAnalysis;
using Scripty.Core;

namespace FlubuCore.TaskGenerator
{
    public class FlubuConsoleTaskGenerator : TaskGeneratorBase
    {
        private readonly ScriptContext _context;

        public FlubuConsoleTaskGenerator(ScriptContext context)
        {
            _context = context;
        }

        public void GenerateTasks(List<Task> tasks, string id)
        {
            

            _context.Output[$"{id}.cs"]
                .WriteLine($@"
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;

namespace FlubuCore.Infrastructure.Terminal
{{
    public static class {id}
    {{  
        {WriteSupportedExternalProcesses(tasks)}      
    }}
}}
");
        }

        public string WriteSupportedExternalProcesses(List<Task> tasks)
        {
            string dictionary = @"public static Dictionary<string, Type> SupportedExternalProcesses = new Dictionary<string, Type>()
    {";

            foreach (var task in tasks)
            {
                dictionary = $@"{dictionary}{{ ""{task.ExecutablePath} {task.Constructor.Arguments[0].ArgumentKey}"", typeof({task.TaskName}) }},{Environment.NewLine}";
            }

            dictionary = $"{dictionary}}};";
          
            return dictionary;
        }
    }
}
